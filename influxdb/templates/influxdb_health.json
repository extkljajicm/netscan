[{"apiVersion":"influxdata.com/v2alpha1","kind":"Label","metadata":{"name":"brave-stonebraker-640001"},"spec":{"color":"#00a3ff","name":"health"}},{"apiVersion":"influxdata.com/v2alpha1","kind":"Dashboard","metadata":{"name":"sleepy-bell-e40001"},"spec":{"associations":[{"kind":"Label","name":"brave-stonebraker-640001"}],"charts":[{"colors":[{"id":"0","name":"viridian","type":"min","hex":"#32B08C"},{"id":"5WshY6Qd70B_uAeiIxY8y","name":"rainforest","type":"threshold","hex":"#4ED8A0","value":150},{"id":"x3RB4SPZoIz-SvPRuBmMb","name":"honeydew","type":"threshold","hex":"#7CE490","value":300},{"id":"slPdbWGeuEHv7hYpZbhF6","name":"pineapple","type":"threshold","hex":"#FFB94A","value":450},{"id":"7TWrsCYVMZ5ZmIR5pekjX","name":"tiger","type":"threshold","hex":"#F48D38","value":600},{"id":"2OZn_6lzAreiIcQZKhItc","name":"thunder","type":"threshold","hex":"#FFD255","value":750},{"id":"ouE37oACM4LK2aZg_LMQi","name":"curacao","type":"threshold","hex":"#F95F53","value":900},{"id":"1","name":"fire","type":"max","hex":"#DC4E58","value":1000}],"decimalPlaces":0,"height":4,"kind":"Gauge","name":"ICMP pps sent","queries":[{"query":"// This just calculates your actual pings per second\nfrom(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pings_sent_total\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"actual_pps_sent\")"}],"staticLegend":{},"suffix":" pps","tickSuffix":" pps","width":4},{"colors":[{"id":"base","name":"fire","type":"text","hex":"#DC4E58"},{"id":"-30UKKN2uqp4hb95M2BtA","name":"pineapple","type":"text","hex":"#FFB94A","value":90},{"id":"nomPfWeCunSpnVZsaLbES","name":"viridian","type":"text","hex":"#32B08C","value":99}],"decimalPlaces":2,"height":2,"kind":"Single_Stat","name":"Ping Success Rate (mean)","queries":[{"query":"// --- 1. Get Total Ping Count ---\n// This counts every ping attempt from the continuous monitor\ntotal_pings = from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"success\") // This field exists on every attempt\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: float(v: r._value), _field: \"total_count\" }))\n\n// --- 2. Get Success Count ---\n// This counts only successful pings\nsuccessful_pings = from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"success\")\n  |> filter(fn: (r) => r._value == true) // Only count the successes\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: float(v: r._value), _field: \"success_count\" }))\n\n// --- 3. Calculate the Percentage ---\njoin(tables: {total: total_pings, success: successful_pings}, on: [\"_time\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _field: \"ping_success_percentage\",\n      _value: if r._value_total > 0.0 then\n                  (r._value_success / r._value_total) * 100.0\n              else\n                  100.0\n  }))\n  // Cap the value at 100.0 (100%)\n  |> map(fn: (r) => ({ r with _value: if r._value > 100.0 then 100.0 else r._value }))\n\n// --- 4. Calculate the average of all percentages in the time range ---\n  |> mean() // <-- This is the new line\n\n|> yield(name: \"avg_ping_success_percentage\")"}],"staticLegend":{},"suffix":" %","width":2,"yPos":4},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"n-sHjsdyiIfjKmmgegHDy","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#8F8AF4"},{"id":"NwCEMOLXhWFQJ3laFXgP_","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#A51414"},{"id":"i1lHxMpr3ccoTCmJy2gEc","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#F4CF31"}],"geom":"line","height":5,"heightRatio":0.2,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"# Active Pingers and ICMP pps","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"active_pingers\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n\n  from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pings_sent_total\")\n  // Calculate the per-second rate of change\n  // nonNegative: true handles counter resets gracefully\n  |> derivative(unit: 1s, nonNegative: true)\n  // average that rate over your window period\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> set(key: \"_field\", value: \"pings_per_second\")\n  |> yield(name: \"pings_per_second\")"}],"show":true,"staticLegend":{"colorizeRows":true,"heightRatio":0.2,"show":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"xCol":"_time","yCol":"_value","yPos":6},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear","suffix":"%"}],"colorizeRows":true,"colors":[{"id":"AF6aIZB1NpfFgAmO9D1xi","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#8F8AF4"},{"id":"lSxz6PFVM3bjt2yoclkDF","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#A51414"},{"id":"Bbaz0C4xtiG690wN2SFRt","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#F4CF31"}],"geom":"line","height":2,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Ping Success Rate Timeseries","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"// --- 1. Get Total Ping Count ---\ntotal_pings = from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"success\") // This field exists on every attempt\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: float(v: r._value), _field: \"total_count\" }))\n\n// --- 2. Get Success Count ---\nsuccessful_pings = from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"success\")\n  |> filter(fn: (r) => r._value == true) // Only count the successes\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: count, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: float(v: r._value), _field: \"success_count\" }))\n\n// --- 3. Calculate the Percentage ---\njoin(tables: {total: total_pings, success: successful_pings}, on: [\"_time\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _field: \"ping_success_percentage\",\n      _value: if r._value_total > 0.0 then\n                  (r._value_success / r._value_total) * 100.0\n              else\n                  100.0\n  }))\n  // Cap the value at 100.0 (100%)\n  |> map(fn: (r) => ({ r with _value: if r._value > 100.0 then 100.0 else r._value }))\n\n// --- 4. Add this line to smooth the graph ---\n  |> movingAverage(n: 11) // Averages the last 5 points.\n\n|> yield(name: \"ping_success_percentage\")"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":2,"widthRatio":1,"xCol":"_time","xPos":2,"yCol":"_value","yPos":4},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"Yl4KUxbY24ync-TgWmmJw","name":"fire","type":"text","hex":"#DC4E58","value":1}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Failed Batches","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"influxdb_failed_batches\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")"}],"staticLegend":{},"width":1,"xPos":4},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"Yl4KUxbY24ync-TgWmmJw","name":"fire","type":"text","hex":"#DC4E58","value":256}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Go Heap Allocation [MByte]","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"memory_mb\")\n  |> mean()\n  |> yield(name: \"max\")"}],"staticLegend":{},"suffix":" MB","width":2,"xPos":4,"yPos":2},{"colors":[{"id":"base","name":"comet","type":"text","hex":"#9394FF"}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Device Count","queries":[{"query":"from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"success\")\n  |> filter(fn: (r) => r[\"_value\"] == true)\n  |> group() // This is the fix: merges all data into one table\n  |> distinct(column: \"ip\") // Now finds all unique IPs from the single table\n  |> count() // Counts the total number of unique IPs"}],"staticLegend":{},"width":2,"xPos":4,"yPos":4},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"sWvYZphNJsCK-VCbWxM4u","name":"pineapple","type":"text","hex":"#FFB94A","value":100},{"id":"3g0o6sa-3rzL_o4dIS_gS","name":"curacao","type":"text","hex":"#F95F53","value":200}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Active Pingers","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"active_pingers\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")"}],"staticLegend":{},"width":1,"xPos":5},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"YwJHg33LkUZDF6cOhsNPN","name":"pineapple","type":"text","hex":"#FFB94A","value":1},{"id":"fAqvWS9ZxAS32rsPIlPcQ","name":"fire","type":"text","hex":"#DC4E58","value":2}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Device Churn Rate","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"device_count\")\n  |> derivative(unit: 1m, nonNegative: false) // Show per-minute change (can be negative)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"device_churn_per_min\")"}],"staticLegend":{},"width":2,"xPos":6},{"colors":[{"id":"base","name":"laser","type":"text","hex":"#00C9FF"}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"OS-RSS [MByte]","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rss_mb\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"staticLegend":{},"suffix":" MB","width":2,"xPos":6,"yPos":2},{"colors":[{"id":"base","name":"laser","type":"text","hex":"#00C9FF"}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Total ICMP Packets sent","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pings_sent_total\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"pings_per_second\")"}],"staticLegend":{},"width":2,"xPos":6,"yPos":4},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"4RpYsUx2ofQxaQsAnf9yg","name":"Color Blind Friendly - Light","type":"scale","hex":"#FFFFFF"},{"id":"eino9vK6Pko4z3pxDVvIE","name":"Color Blind Friendly - Light","type":"scale","hex":"#E69F00"},{"id":"8XUB2eINL7LS-6PyeoJsU","name":"Color Blind Friendly - Light","type":"scale","hex":"#56B4E9"},{"id":"5cPhpHcvhS4CrpORqpj88","name":"Color Blind Friendly - Light","type":"scale","hex":"#009E73"},{"id":"CZgjamQDTFHj9jC3duPlS","name":"Color Blind Friendly - Light","type":"scale","hex":"#F0E442"},{"id":"Kn1D8Pc1uD2dIVI4s23L_","name":"Color Blind Friendly - Light","type":"scale","hex":"#0072B2"},{"id":"xmGKAneVLL8urn_ay4-YD","name":"Color Blind Friendly - Light","type":"scale","hex":"#D55E00"},{"id":"ImMFpkdf38Z4Pm7ToOzNt","name":"Color Blind Friendly - Light","type":"scale","hex":"#CC79A7"}],"geom":"line","height":5,"heightRatio":0.2,"hoverDimension":"auto","kind":"Xy","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"# Go-Routines and Device Count","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"device_count\" or r[\"_field\"] == \"goroutines\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"}],"show":true,"staticLegend":{"colorizeRows":true,"heightRatio":0.2,"show":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"width":6,"widthRatio":1,"xCol":"_time","xPos":6,"yCol":"_value","yPos":6},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"InfluxDB Status","queries":[{"query":"from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"influxdb_ok\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> yield(name: \"last\")"}],"staticLegend":{},"width":4,"xPos":8},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"YwJHg33LkUZDF6cOhsNPN","name":"pineapple","type":"text","hex":"#FFB94A","value":500},{"id":"fAqvWS9ZxAS32rsPIlPcQ","name":"fire","type":"text","hex":"#DC4E58","value":1000}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Average Ping Duration [ms]","queries":[{"query":"from(bucket: \"netscan\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ping\")\n  |> filter(fn: (r) => r[\"_field\"] == \"rtt_ms\")\n  |> filter(fn: (r) => r._value > 0.0)\n  |> group() // <-- Add this line to ungroup all devices\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"overall_average_rtt_ms\")"}],"staticLegend":{},"suffix":" ms","width":2,"xPos":8,"yPos":2},{"axes":[{"base":"10","name":"x","scale":"linear"},{"base":"10","name":"y","scale":"linear"}],"colorizeRows":true,"colors":[{"id":"ZnsGlt-B87Hbc7lu-uXMG","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#8F8AF4"},{"id":"cnsy4cEitjUTSvTR_RKPK","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#A51414"},{"id":"BHskid_lFhtkmajygqrk6","name":"Do Androids Dream of Electric Sheep?","type":"scale","hex":"#F4CF31"},{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"P9rB2vh5xIxRQMFGHUMO8","name":"thunder","type":"text","hex":"#FFD255","value":25},{"id":"7on8Zw7QJo1xSqVaUWaPJ","name":"pineapple","type":"text","hex":"#FFB94A","value":50},{"id":"wx_NhL91HxxyVa5oGAmRc","name":"tiger","type":"text","hex":"#F48D38","value":75},{"id":"MAdXp5yW-p7pUQBS40dRM","name":"fire","type":"text","hex":"#DC4E58","value":100}],"decimalPlaces":0,"height":2,"hoverDimension":"auto","kind":"Single_Stat_Plus_Line","legendColorizeRows":true,"legendOpacity":1,"legendOrientationThreshold":100000000,"name":"Rate Limit Utilization (set correct ping_rate_limit)","opacity":1,"orientationThreshold":100000000,"position":"overlaid","queries":[{"query":"// --- 1. Set your configured rate limit here ---\nCONFIG_RATE_LIMIT = 256.0\n\n// --- 2. Get Actual PPS ---\n// Use derivative to get the per-second rate\nactual_pps = from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pings_sent_total\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> group() // Group to get a single line\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n// --- 3. Calculate Utilization Percentage ---\nactual_pps\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _field: \"rate_limit_utilization_percent\",\n      // r._value is already the actual_pps (e.g., 11.0)\n      _value: (r._value / CONFIG_RATE_LIMIT) * 100.0\n  }))\n\n|> yield(name: \"rate_limit_utilization_percent\")"}],"staticLegend":{"colorizeRows":true,"opacity":1,"orientationThreshold":100000000,"widthRatio":1},"suffix":" %","width":4,"widthRatio":1,"xCol":"_time","xPos":8,"yCol":"_value","yPos":4},{"colors":[{"id":"base","name":"viridian","type":"text","hex":"#32B08C"},{"id":"YwJHg33LkUZDF6cOhsNPN","name":"pineapple","type":"text","hex":"#FFB94A","value":500},{"id":"fAqvWS9ZxAS32rsPIlPcQ","name":"fire","type":"text","hex":"#DC4E58","value":1000}],"decimalPlaces":0,"height":2,"kind":"Single_Stat","name":"Measured ping_interval (compare to config)","queries":[{"query":"// --- 1. Get Actual PPS ---\n// This calculates your average pings per second (e.g., 11.0)\nactual_pps = from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"pings_sent_total\")\n  |> derivative(unit: 1s, nonNegative: true)\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: r._value, _field: \"actual_pps\" }))\n\n// --- 2. Get Device Count ---\n// This gets the last reported device count\ndevice_count = from(bucket: \"health\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"health_metrics\")\n  |> filter(fn: (r) => r[\"_field\"] == \"device_count\")\n  |> group()\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> map(fn: (r) => ({ _time: r._time, _value: float(v: r._value), _field: \"device_count\" }))\n\n// --- 3. Calculate Actual Interval ---\njoin(tables: {pps: actual_pps, devices: device_count}, on: [\"_time\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _field: \"actual_avg_ping_interval_s\",\n      // Calculate: device_count / actual_pps\n      _value: if r._value_pps > 0.0 then\n                  r._value_devices / r._value_pps\n              else\n                  0.0 // Avoid divide-by-zero\n  }))\n\n|> yield(name: \"actual_avg_ping_interval_s\")"}],"staticLegend":{},"suffix":" s","width":2,"xPos":10,"yPos":2}],"name":"InfluxDB Health"}}]